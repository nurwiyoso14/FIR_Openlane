
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.38 (git sha1 543faed9c8c, clang++ 16.0.6 -fPIC -Os)

Loaded SDC plugin
[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Liberty frontend: /home/nurwiyoso14/.volare/volare/sky130/versions/bdc9412b3e468c102d01b7cf6337be06ec6e9c9a/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: /mnt/d/APIC/FIR_Openlane/shifter/shifter.v
Parsing SystemVerilog input from `/mnt/d/APIC/FIR_Openlane/shifter/shifter.v' to AST representation.
Generating RTLIL representation for module `\shifter'.
Successfully finished Verilog frontend.

3. Generating Graphviz representation of design.
Writing dot description to `/mnt/d/APIC/FIR_Openlane/shifter/runs/RUN_2024-06-17_07-28-12/06-yosys-synthesis/hierarchy.dot'.
Dumping module shifter to page 1.

4. Executing HIERARCHY pass (managing design hierarchy).

4.1. Analyzing design hierarchy..
Top module:  \shifter

4.2. Analyzing design hierarchy..
Top module:  \shifter
Removed 0 unused modules.
Renaming module shifter to shifter.

5. Executing TRIBUF pass.

6. Executing HIERARCHY pass (managing design hierarchy).

6.1. Analyzing design hierarchy..
Top module:  \shifter

6.2. Analyzing design hierarchy..
Top module:  \shifter
Removed 0 unused modules.

7. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

8. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/mnt/d/APIC/FIR_Openlane/shifter/shifter.v:14$1 in module shifter.
Removed a total of 0 dead cases.

9. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 1 assignment to connection.

10. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\shifter.$proc$/mnt/d/APIC/FIR_Openlane/shifter/shifter.v:0$3'.
  Set init value: \data = 240'000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

11. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset in `\shifter.$proc$/mnt/d/APIC/FIR_Openlane/shifter/shifter.v:14$1'.

12. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

13. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\shifter.$proc$/mnt/d/APIC/FIR_Openlane/shifter/shifter.v:0$3'.
Creating decoders for process `\shifter.$proc$/mnt/d/APIC/FIR_Openlane/shifter/shifter.v:14$1'.
     1/2: $0\data[239:0] [15:0]
     2/2: $0\data[239:0] [239:16]

14. Executing PROC_DLATCH pass (convert process syncs to latches).

15. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\shifter.\data' using process `\shifter.$proc$/mnt/d/APIC/FIR_Openlane/shifter/shifter.v:14$1'.
  created $adff cell `$procdff$4' with positive edge clock and positive level reset.

16. Executing PROC_MEMWR pass (convert process memory writes to cells).

17. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `shifter.$proc$/mnt/d/APIC/FIR_Openlane/shifter/shifter.v:0$3'.
Removing empty process `shifter.$proc$/mnt/d/APIC/FIR_Openlane/shifter/shifter.v:14$1'.
Cleaned up 0 empty switches.

18. Executing CHECK pass (checking for obvious problems).
Checking module shifter...
Found and reported 0 problems.

19. Executing OPT_EXPR pass (perform const folding).
Optimizing module shifter.
<suppressed ~1 debug messages>

20. Executing FLATTEN pass (flatten design).

21. Executing OPT_EXPR pass (perform const folding).
Optimizing module shifter.

22. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \shifter..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

23. Executing OPT pass (performing simple optimizations).

23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module shifter.

23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\shifter'.
Removed a total of 0 cells.

23.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \shifter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

23.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \shifter.
Performed a total of 0 changes.

23.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\shifter'.
Removed a total of 0 cells.

23.6. Executing OPT_DFF pass (perform DFF optimizations).

23.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \shifter..

23.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module shifter.

23.9. Finished OPT passes. (There is nothing left to do.)

24. Executing FSM pass (extract and optimize FSM).

24.1. Executing FSM_DETECT pass (finding FSMs in design).

24.2. Executing FSM_EXTRACT pass (extracting FSM from design).

24.3. Executing FSM_OPT pass (simple optimizations of FSMs).

24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \shifter..

24.5. Executing FSM_OPT pass (simple optimizations of FSMs).

24.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

24.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

24.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

25. Executing OPT pass (performing simple optimizations).

25.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module shifter.

25.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\shifter'.
Removed a total of 0 cells.

25.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \shifter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

25.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \shifter.
Performed a total of 0 changes.

25.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\shifter'.
Removed a total of 0 cells.

25.6. Executing OPT_DFF pass (perform DFF optimizations).

25.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \shifter..

25.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module shifter.

25.9. Finished OPT passes. (There is nothing left to do.)

26. Executing WREDUCE pass (reducing word size of cells).

27. Executing PEEPOPT pass (run peephole optimizers).

28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \shifter..

29. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module shifter:
  created 0 $alu and 0 $macc cells.

30. Executing SHARE pass (SAT-based resource sharing).

31. Executing OPT pass (performing simple optimizations).

31.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module shifter.

31.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\shifter'.
Removed a total of 0 cells.

31.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \shifter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

31.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \shifter.
Performed a total of 0 changes.

31.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\shifter'.
Removed a total of 0 cells.

31.6. Executing OPT_DFF pass (perform DFF optimizations).

31.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \shifter..

31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module shifter.

31.9. Finished OPT passes. (There is nothing left to do.)

32. Executing MEMORY pass.

32.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

32.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

32.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

32.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

32.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

32.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \shifter..

32.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

32.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

32.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \shifter..

32.10. Executing MEMORY_COLLECT pass (generating $mem cells).

33. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \shifter..

34. Executing OPT pass (performing simple optimizations).

34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module shifter.

34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\shifter'.
Removed a total of 0 cells.

34.3. Executing OPT_DFF pass (perform DFF optimizations).

34.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \shifter..

34.5. Finished fast OPT passes.

35. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

36. Executing OPT pass (performing simple optimizations).

36.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module shifter.

36.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\shifter'.
Removed a total of 0 cells.

36.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \shifter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

36.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \shifter.
Performed a total of 0 changes.

36.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\shifter'.
Removed a total of 0 cells.

36.6. Executing OPT_SHARE pass.

36.7. Executing OPT_DFF pass (perform DFF optimizations).

36.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \shifter..

36.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module shifter.

36.10. Finished OPT passes. (There is nothing left to do.)

37. Executing TECHMAP pass (map to technology primitives).

37.1. Executing Verilog-2005 frontend: /nix/store/vn1kmwhr52wisnfkmn6fk9g15p3klzs0-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/vn1kmwhr52wisnfkmn6fk9g15p3klzs0-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

37.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $adff.
No more expansions possible.
<suppressed ~74 debug messages>

38. Executing OPT pass (performing simple optimizations).

38.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module shifter.

38.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\shifter'.
Removed a total of 0 cells.

38.3. Executing OPT_DFF pass (perform DFF optimizations).

38.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \shifter..

38.5. Finished fast OPT passes.

39. Executing ABC pass (technology mapping using ABC).

39.1. Extracting gate netlist of module `\shifter' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

40. Executing OPT pass (performing simple optimizations).

40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module shifter.

40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\shifter'.
Removed a total of 0 cells.

40.3. Executing OPT_DFF pass (perform DFF optimizations).

40.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \shifter..

40.5. Finished fast OPT passes.

41. Executing HIERARCHY pass (managing design hierarchy).

41.1. Analyzing design hierarchy..
Top module:  \shifter

41.2. Analyzing design hierarchy..
Top module:  \shifter
Removed 0 unused modules.

42. Printing statistics.

=== shifter ===

   Number of wires:                  5
   Number of wire bits:            498
   Number of public wires:           5
   Number of public wire bits:     498
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                240
     $_DFF_PP0_                    240

43. Executing CHECK pass (checking for obvious problems).
Checking module shifter...
Found and reported 0 problems.

44. Generating Graphviz representation of design.
Writing dot description to `/mnt/d/APIC/FIR_Openlane/shifter/runs/RUN_2024-06-17_07-28-12/06-yosys-synthesis/post_techmap.dot'.
Dumping module shifter to page 1.

45. Executing SHARE pass (SAT-based resource sharing).

46. Executing OPT pass (performing simple optimizations).

46.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module shifter.

46.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\shifter'.
Removed a total of 0 cells.

46.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \shifter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

46.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \shifter.
Performed a total of 0 changes.

46.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\shifter'.
Removed a total of 0 cells.

46.6. Executing OPT_DFF pass (perform DFF optimizations).

46.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \shifter..

46.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module shifter.

46.9. Finished OPT passes. (There is nothing left to do.)

47. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \shifter..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>
{
   "creator": "Yosys 0.38 (git sha1 543faed9c8c, clang++ 16.0.6 -fPIC -Os)",
   "invocation": "stat -json -liberty /mnt/d/APIC/FIR_Openlane/shifter/runs/RUN_2024-06-17_07-28-12/tmp/588d4dece20c4928a984f1e67c9aabfd.lib ",
   "modules": {
      "\\shifter": {
         "num_wires":         4,
         "num_wire_bits":     258,
         "num_pub_wires":     4,
         "num_pub_wire_bits": 258,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         240,
         "num_cells_by_type": {
            "$_DFF_PP0_": 240
         }
      }
   },
      "design": {
         "num_wires":         4,
         "num_wire_bits":     258,
         "num_pub_wires":     4,
         "num_pub_wire_bits": 258,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         240,
         "num_cells_by_type": {
            "$_DFF_PP0_": 240
         }
      }
}

48. Printing statistics.

=== shifter ===

   Number of wires:                  4
   Number of wire bits:            258
   Number of public wires:           4
   Number of public wire bits:     258
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                240
     $_DFF_PP0_                    240

   Area for cell type $_DFF_PP0_ is unknown!

mapping tbuf
[INFO] Applying tri-state buffer mapping from '/home/nurwiyoso14/.volare/volare/sky130/versions/bdc9412b3e468c102d01b7cf6337be06ec6e9c9a/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v'â¦

49. Executing TECHMAP pass (map to technology primitives).

49.1. Executing Verilog-2005 frontend: /home/nurwiyoso14/.volare/volare/sky130/versions/bdc9412b3e468c102d01b7cf6337be06ec6e9c9a/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/nurwiyoso14/.volare/volare/sky130/versions/bdc9412b3e468c102d01b7cf6337be06ec6e9c9a/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

49.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

50. Executing SIMPLEMAP pass (map simple cells to gate primitives).
[INFO] Applying latch mapping from '/home/nurwiyoso14/.volare/volare/sky130/versions/bdc9412b3e468c102d01b7cf6337be06ec6e9c9a/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v'â¦

51. Executing TECHMAP pass (map to technology primitives).

51.1. Executing Verilog-2005 frontend: /home/nurwiyoso14/.volare/volare/sky130/versions/bdc9412b3e468c102d01b7cf6337be06ec6e9c9a/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/nurwiyoso14/.volare/volare/sky130/versions/bdc9412b3e468c102d01b7cf6337be06ec6e9c9a/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

51.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

52. Executing SIMPLEMAP pass (map simple cells to gate primitives).

53. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

53.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\shifter':
  mapped 240 $_DFF_PN0_ cells to \sky130_fd_sc_hd__dfrtp_2 cells.
{
   "creator": "Yosys 0.38 (git sha1 543faed9c8c, clang++ 16.0.6 -fPIC -Os)",
   "invocation": "stat -json -liberty /mnt/d/APIC/FIR_Openlane/shifter/runs/RUN_2024-06-17_07-28-12/tmp/588d4dece20c4928a984f1e67c9aabfd.lib ",
   "modules": {
      "\\shifter": {
         "num_wires":         244,
         "num_wire_bits":     498,
         "num_pub_wires":     4,
         "num_pub_wire_bits": 258,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         480,
         "area":              6306.048000,
         "num_cells_by_type": {
            "$_NOT_": 240,
            "sky130_fd_sc_hd__dfrtp_2": 240
         }
      }
   },
      "design": {
         "num_wires":         244,
         "num_wire_bits":     498,
         "num_pub_wires":     4,
         "num_pub_wire_bits": 258,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         480,
         "area":              6306.048000,
         "num_cells_by_type": {
            "$_NOT_": 240,
            "sky130_fd_sc_hd__dfrtp_2": 240
         }
      }
}

54. Printing statistics.

=== shifter ===

   Number of wires:                244
   Number of wire bits:            498
   Number of public wires:           4
   Number of public wire bits:     258
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                480
     $_NOT_                        240
     sky130_fd_sc_hd__dfrtp_2      240

   Area for cell type $_NOT_ is unknown!

   Chip area for module '\shifter': 6306.048000

[INFO] USING STRATEGY AREA 0

55. Executing ABC pass (technology mapping using ABC).

55.1. Extracting gate netlist of module `\shifter' to `/run/user/1000/yosys-abc-eaLlPR/input.blif'..
Extracted 240 gates and 241 wires to a netlist network with 1 inputs and 240 outputs.

55.1.1. Executing ABC.
Running ABC command: "/nix/store/5bgsgwzww9f2z7wl7kga42xrf1vpmnql-yosys-abc/bin/abc" -s -f /run/user/1000/yosys-abc-eaLlPR/abc.script 2>&1
ABC: ABC command line: "source /run/user/1000/yosys-abc-eaLlPR/abc.script".
ABC: 
ABC: + read_blif /run/user/1000/yosys-abc-eaLlPR/input.blif 
ABC: + read_lib -w /mnt/d/APIC/FIR_Openlane/shifter/runs/RUN_2024-06-17_07-28-12/tmp/588d4dece20c4928a984f1e67c9aabfd.lib 
ABC: Parsing finished successfully.  Parsing time =     0.08 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/mnt/d/APIC/FIR_Openlane/shifter/runs/RUN_2024-06-17_07-28-12/tmp/588d4dece20c4928a984f1e67c9aabfd.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.10 sec
ABC: Memory =    9.54 MB. Time =     0.10 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /mnt/d/APIC/FIR_Openlane/shifter/runs/RUN_2024-06-17_07-28-12/06-yosys-synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2/Y".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /mnt/d/APIC/FIR_Openlane/shifter/runs/RUN_2024-06-17_07-28-12/06-yosys-synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + retime -D -D 25000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 25000 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + 
ABC: + stime -p 
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: WireLoad = "none"  Gates =    240 (100.0 %)   Cap = 37.7 ff ( 12.5 %)   Area =      900.86 (  0.0 %)   Delay =   118.84 ps  (100.0 %)               
ABC: Path  0 --       1 : 0  240 pi                     A =   0.00  Df =   0.0   -0.0 ps  S =   0.0 ps  Cin =  0.0 ff  Cout =1114.1 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     242 : 1    1 sky130_fd_sc_hd__inv_2 A =   3.75  Df = 118.8  -57.1 ps  S = 157.7 ps  Cin =  4.5 ff  Cout =  33.4 ff  Cmax = 331.4 ff  G =  749  
ABC: Start-point = pi0 (\reset).  End-point = po0 ($auto$rtlil.cc:2675:NotGate$325).
ABC: + print_stats -m 
ABC: netlist                       : i/o =    1/  240  lat =    0  nd =   240  edge =    240  area =900.00  delay = 1.00  lev = 1
ABC: + write_blif /run/user/1000/yosys-abc-eaLlPR/output.blif 

55.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:      240
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        1
ABC RESULTS:          output signals:      240
Removing temp directory.

56. Executing SETUNDEF pass (replace undef values with defined constants).

57. Executing HILOMAP pass (mapping to constant drivers).
Warning: Selection "sky130_fd_sc_hd__conb_1" did not match any module.
Warning: Selection "LO" did not match any object.

58. Executing SPLITNETS pass (splitting up multi-bit signals).

59. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \shifter..
Removed 0 unused cells and 241 unused wires.
<suppressed ~1 debug messages>

60. Executing INSBUF pass (insert buffer cells for connected wires).

61. Executing CHECK pass (checking for obvious problems).
Checking module shifter...
Found and reported 0 problems.
{
   "creator": "Yosys 0.38 (git sha1 543faed9c8c, clang++ 16.0.6 -fPIC -Os)",
   "invocation": "stat -json -liberty /mnt/d/APIC/FIR_Openlane/shifter/runs/RUN_2024-06-17_07-28-12/tmp/588d4dece20c4928a984f1e67c9aabfd.lib ",
   "modules": {
      "\\shifter": {
         "num_wires":         244,
         "num_wire_bits":     498,
         "num_pub_wires":     4,
         "num_pub_wire_bits": 258,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         480,
         "area":              7206.912000,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__dfrtp_2": 240,
            "sky130_fd_sc_hd__inv_2": 240
         }
      }
   },
      "design": {
         "num_wires":         244,
         "num_wire_bits":     498,
         "num_pub_wires":     4,
         "num_pub_wire_bits": 258,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         480,
         "area":              7206.912000,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__dfrtp_2": 240,
            "sky130_fd_sc_hd__inv_2": 240
         }
      }
}

62. Printing statistics.

=== shifter ===

   Number of wires:                244
   Number of wire bits:            498
   Number of public wires:           4
   Number of public wire bits:     258
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                480
     sky130_fd_sc_hd__dfrtp_2      240
     sky130_fd_sc_hd__inv_2        240

   Chip area for module '\shifter': 7206.912000

63. Executing Verilog backend.
Dumping module `\shifter'.

64. Executing JSON backend.

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: 18efd0e77a, CPU: user 0.99s system 0.18s, MEM: 54.31 MB peak
Yosys 0.38 (git sha1 543faed9c8c, clang++ 16.0.6 -fPIC -Os)
Time spent: 53% 7x stat (0 sec), 12% 2x read_liberty (0 sec), ...
